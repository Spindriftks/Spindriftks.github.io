<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>它夏了夏天</title>
  
  <subtitle>生命中有一种遇见，就让它美如行云流水，然后一生去回味。</subtitle>
  <link href="https://spindriftks.github.io/atom.xml" rel="self"/>
  
  <link href="https://spindriftks.github.io/"/>
  <updated>2021-03-24T06:59:28.946Z</updated>
  <id>https://spindriftks.github.io/</id>
  
  <author>
    <name>Kyle</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>classmethod、staticmethod、property三个装饰器理解学习</title>
    <link href="https://spindriftks.github.io/2021/03/24/classmethod%E3%80%81staticmethod%E3%80%81property%E4%B8%89%E4%B8%AA%E8%A3%85%E9%A5%B0%E5%99%A8%E7%90%86%E8%A7%A3%E5%AD%A6%E4%B9%A0/"/>
    <id>https://spindriftks.github.io/2021/03/24/classmethod%E3%80%81staticmethod%E3%80%81property%E4%B8%89%E4%B8%AA%E8%A3%85%E9%A5%B0%E5%99%A8%E7%90%86%E8%A7%A3%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-24T06:27:29.000Z</published>
    <updated>2021-03-24T06:59:28.946Z</updated>
    
    <content type="html"><![CDATA[<p>python自带的三个装饰器，classmethod、staticmethod和property理解学习</p><a id="more"></a><p>在stackoverflow上有个高回答的问题，</p><blockquote><p><a href="https://stackoverflow.com/questions/12179271/meaning-of-classmethod-and-staticmethod-for-beginner">Meaning of @classmethod and @staticmethod for beginner? </a></p></blockquote><p>我就直接参考<code>Rostyslav Dzinko</code> 的回答改写了下</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*-coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2021&#x2F;3&#x2F;24 13:08</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># classmethod、staticmethod、property</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Date(object):</span><br><span class="line">    def __init__(self, day&#x3D;0, month&#x3D;0, year&#x3D;0):</span><br><span class="line">        self.day &#x3D; day</span><br><span class="line">        self.month &#x3D; month</span><br><span class="line">        self.year &#x3D; year</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def from_string(cls, date_as_string):</span><br><span class="line">        day, month, year &#x3D; map(int, date_as_string.split(&#39;-&#39;))</span><br><span class="line">        date_1 &#x3D; cls(day, month, year)</span><br><span class="line">        return date_1</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def is_date_valid(date_as_string):</span><br><span class="line">        day, month, year &#x3D; map(int, date_as_string.split(&#39;-&#39;))</span><br><span class="line">        return day &lt;&#x3D; 31 and month &lt;&#x3D; 12 and year &lt;&#x3D; 9999</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def get_month(self):</span><br><span class="line">        return self.month</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &#39;year: &#123;&#125;, month: &#123;&#125;, day: &#123;&#125;&#39;.format(self.year, self.month, self.day)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">date1 &#x3D; Date(24, 3, 2021)</span><br><span class="line">print(date1)</span><br><span class="line"></span><br><span class="line">print(Date.is_date_valid(&#39;24-03-2021&#39;))</span><br><span class="line">date2 &#x3D; Date.from_string(&#39;24-03-2021&#39;)</span><br><span class="line">print(date2)</span><br><span class="line">print(date2.get_month)</span><br></pre></td></tr></table></figure><h3 id="classmethod"><a href="#classmethod" class="headerlink" title="classmethod"></a>classmethod</h3><p>classmethod是类装饰器，官方解释是指定一个类的方法为类方法，标致就是无需实例化就可以调用该方法。</p><p>然后我是这么理解的，比如上面的代码，一个Date类，最基本的用法就是实例化Date并且给三个参数：日、月、年，也就是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date1 &#x3D; Date(24, 3, 2021)</span><br><span class="line">print(date1)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">year: 2021, month: 3, day: 24</span><br></pre></td></tr></table></figure><p>但是我们在实际的使用过程中，可能数据源那边的日期格式各种各样，不是所有的都是拆分成日月年这样一个个给你的，比如都是’24-03-2021’这样的格式，那么想用Date就要先对输入的日期进行一个格式化处理，先用一个方法把’24-03-2021’拆分成日月年。</p><p>classmethod装饰器就可以实现这个功能，还不需要重构函数，直接加进去一个日期解析的函数即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@classmethod</span><br><span class="line">def from_string(cls, date_as_string):</span><br><span class="line">    day, month, year &#x3D; map(int, date_as_string.split(&#39;-&#39;))</span><br><span class="line">    date_1 &#x3D; cls(day, month, year)</span><br><span class="line">    return date_1</span><br></pre></td></tr></table></figure><h3 id="staticmethod"><a href="#staticmethod" class="headerlink" title="staticmethod"></a>staticmethod</h3><p>staticmethod我的理解就是，这个装饰器修饰的方法，其实在业务上和类本身没什么关系，就是为了给这个类加某个功能，比如对某个字段进行校验，获取当前日期等等，和业务其实没什么关联，调用的时候直接类就能调用，不需要实例化。<br>比如上面的代码，用staticmethod修饰了一个对输入日期合法值校验的方法，其实要不要这个对业务（输入固定格式年月日）都没什么影响，完全是扩充了功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@staticmethod</span><br><span class="line">def is_date_valid(date_as_string):</span><br><span class="line">    day, month, year &#x3D; map(int, date_as_string.split(&#39;-&#39;))</span><br><span class="line">    return day &lt;&#x3D; 31 and month &lt;&#x3D; 12 and year &lt;&#x3D; 9999</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(Date.is_date_valid(&#39;24-03-2021&#39;))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><p>用property装饰的方法，可以直接当成类的属性来使用，比如示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@property</span><br><span class="line">def get_month(self):</span><br><span class="line">    return self.month</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date2 &#x3D; Date.from_string(&#39;24-03-2021&#39;)</span><br><span class="line">print(date2)</span><br><span class="line">print(date2.get_month)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">year: 2021, month: 3, day: 24</span><br><span class="line">3</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;python自带的三个装饰器，classmethod、staticmethod和property理解学习&lt;/p&gt;</summary>
    
    
    
    <category term="python基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python3" scheme="https://spindriftks.github.io/tags/python3/"/>
    
    <category term="装饰器" scheme="https://spindriftks.github.io/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Centos下yum安装MariaDB</title>
    <link href="https://spindriftks.github.io/2021/03/23/Centos%E4%B8%8Byum%E5%AE%89%E8%A3%85MariaDB/"/>
    <id>https://spindriftks.github.io/2021/03/23/Centos%E4%B8%8Byum%E5%AE%89%E8%A3%85MariaDB/</id>
    <published>2021-03-23T05:10:13.000Z</published>
    <updated>2021-03-23T05:52:50.320Z</updated>
    
    <content type="html"><![CDATA[<p>Centos7下使用yum方式安装MariaDB</p><a id="more"></a><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line"></span><br><span class="line">Server version: 10.5.9-MariaDB MariaDB Server</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>其实教程一搜一大堆，不过很多都是互相抄，还有就是年代比较久远，有条件还是直接官网看搭建说明吧</p><h4 id="删除MySQL和MariaDB"><a href="#删除MySQL和MariaDB" class="headerlink" title="删除MySQL和MariaDB"></a>删除MySQL和MariaDB</h4><p>卸载当前服务器上的mysql和mariadb</p><p>MySQL：<code>rpm -qa |grep mysql | xargs rpm -e --nodeps</code><br><code>yum remove mysql mysql-server mysql-libs</code></p><p>MariaDB：<code>rpm -qa | grep mariadb | xargs rpm -e --nodeps</code><br>大写再来一遍：<code>rpm -qa | grep MariaDB | xargs rpm -e --nodeps</code></p><h4 id="创建repo"><a href="#创建repo" class="headerlink" title="创建repo"></a>创建repo</h4><blockquote><p><a href="https://downloads.mariadb.org/mariadb/repositories/#distro=CentOS&distro_release=centos7-amd64--centos7&mirror=escience&version=10.5">官网教程</a></p></blockquote><p>在/etc/yum.repos.d/   目录下创建<code>MariaDB.repo</code> 文件，网上很多教程说用中科大的yum源，反正我是遇到了很多的坑，最后还是换成了官网的<br>中科大的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mariadb]</span><br><span class="line">name &#x3D; MariaDB</span><br><span class="line">baseurl &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;mariadb&#x2F;yum&#x2F;10.1&#x2F;centos7-amd64&#x2F;</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;mariadb&#x2F;yum&#x2F;RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck&#x3D;1</span><br></pre></td></tr></table></figure><p>官网：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># MariaDB 10.5 CentOS repository list - created 2021-03-23 02:45 UTC</span><br><span class="line"># http:&#x2F;&#x2F;downloads.mariadb.org&#x2F;mariadb&#x2F;repositories&#x2F;</span><br><span class="line">[mariadb]</span><br><span class="line">name &#x3D; MariaDB</span><br><span class="line">baseurl &#x3D; http:&#x2F;&#x2F;yum.mariadb.org&#x2F;10.5&#x2F;centos7-amd64</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;yum.mariadb.org&#x2F;RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck&#x3D;1</span><br></pre></td></tr></table></figure><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><p><code>yum -y install MariaDB-server MariaDB-client</code></p><p>等待安装完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#启动服务</span><br><span class="line">systemctl start mariadb </span><br><span class="line">#设置开机启动</span><br><span class="line">systemctl enable mariadb </span><br></pre></td></tr></table></figure><p>结束之后开始安全配置：<br>直接敲：<code>mysql_secure_installation</code><br>会让你设置root密码，是否允许远程登录，是否删除test库等等，根据需要自己选吧</p><h4 id="安装后配置"><a href="#安装后配置" class="headerlink" title="安装后配置"></a>安装后配置</h4><p>首先是字符集配置，默认是<code>latin1</code>，为了方便还是改成utf8吧<br>修改配置文件：<code>vim /etc/my.cnf.d/server.cnf</code>(改之前先备份)<br>在mysqld栏添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">init_connect&#x3D;&#39;SET collation_connection &#x3D; utf8_unicode_ci&#39; </span><br><span class="line">init_connect&#x3D;&#39;SET NAMES utf8&#39; </span><br><span class="line">character-set-server&#x3D;utf8 </span><br><span class="line">collation-server&#x3D;utf8_unicode_ci </span><br><span class="line">skip-character-set-client-handshake</span><br></pre></td></tr></table></figure><p>保存，重启<code>systemctl restart mariadb</code></p><h4 id="MariaDB操作"><a href="#MariaDB操作" class="headerlink" title="MariaDB操作"></a>MariaDB操作</h4><p>作为MySQL的开源分支，操作上无缝对接MySQL<br>进控制台：<code>mysql -uroot -p</code>输入密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@QA ~]# mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 4</span><br><span class="line">Server version: 10.5.9-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; </span><br></pre></td></tr></table></figure><p>建用户：<code>create user tester@localhost identified by &#39;yourpw&#39;;</code><br>赋权限：<code>grant all privileges on *.* to tester@&#39;%&#39; identified by &#39;yourpw&#39;;</code></p><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><h4 id="切yum源到中科大，出现系统未注册"><a href="#切yum源到中科大，出现系统未注册" class="headerlink" title="切yum源到中科大，出现系统未注册"></a>切yum源到中科大，出现系统未注册</h4><p>想切换到中科大的yum源，更改了/etc/yum.repo.d/CentOS-Base.repo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -e &#39;s|^mirrorlist&#x3D;|#mirrorlist&#x3D;|g&#39; \</span><br><span class="line">         -e &#39;s|^#baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org&#x2F;centos|baseurl&#x3D;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;centos|g&#39; \</span><br><span class="line">         -i.bak \</span><br><span class="line">         &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo</span><br></pre></td></tr></table></figure><p>更改之后，yum clean all，yum makecache都执行了，然后安装个wget都直接失败，报下面这个：<br><code>This system is not registered with an entitlement server. You can use subscription-manager to regist</code></p><p>解决办法：<br>删了安装好的yum，重新下载那三个基础的yum文件，重新安装，再切yum源到163或者ali的</p><p>卸载：<code>rpm -qa | grep yum | xargs rpm -e</code><br>下载安装三个基础文件：</p><p><a href="http://centos.ustc.edu.cn/centos/7.9.2009/os/x86_64/Packages/">下载地址</a><br>直接搜这仨：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-3.4.3-168.el7.centos.noarch</span><br><span class="line">yum-metadata-parser-1.1.4-10.el7.x86_64</span><br><span class="line">yum-plugin-fastestmirror-1.1.31-54.el7_8.noarch</span><br></pre></td></tr></table></figure><p>下载完成后上传到服务器，到文件夹位置执行：<code>rpm -ivh yum-*</code> yum安装完成，后面就切163的源吧。。。<code>wget http://mirrors.163.com/.help/CentOS7-Base-163.repo</code><br>别忘了yum clean all和yum makecache</p><h4 id="GPG密钥失败"><a href="#GPG密钥失败" class="headerlink" title="GPG密钥失败"></a>GPG密钥失败</h4><p>yum -y install MariaDB-server MariaDB-client  这步安装时候，读取repo配置，有校验GPG Key这步骤，按照官网的死活没过得去，一直提示密钥失败，临时解决办法很简单，直接关掉校验<code>gpgcheck=0</code></p><p>彻底的解决办法，试了网上很多，没有一个成功的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm --import http:&#x2F;&#x2F;mirrors.163.com&#x2F;centos&#x2F;RPM-GPG-KEY-CentOS-7</span><br><span class="line">rpm --import https:&#x2F;&#x2F;yum.mariadb.org&#x2F;RPM-GPG-KEY-MariaDB</span><br><span class="line">rpm --import https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;mariadb&#x2F;yum&#x2F;RPM-GPG-KEY-MariaDB</span><br></pre></td></tr></table></figure><p>有空再研究吧…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Centos7下使用yum方式安装MariaDB&lt;/p&gt;</summary>
    
    
    
    <category term="Devops" scheme="https://spindriftks.github.io/categories/Devops/"/>
    
    
    <category term="Centos7" scheme="https://spindriftks.github.io/tags/Centos7/"/>
    
    <category term="MariaDB" scheme="https://spindriftks.github.io/tags/MariaDB/"/>
    
  </entry>
  
  <entry>
    <title>一点日常记录</title>
    <link href="https://spindriftks.github.io/2021/03/10/%E4%B8%80%E7%82%B9%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    <id>https://spindriftks.github.io/2021/03/10/%E4%B8%80%E7%82%B9%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/</id>
    <published>2021-03-10T05:21:30.000Z</published>
    <updated>2021-03-15T01:09:06.404Z</updated>
    
    <content type="html"><![CDATA[<p>日常的一些知识点记录</p><a id="more"></a><h3 id="MySQL插数据"><a href="#MySQL插数据" class="headerlink" title="MySQL插数据"></a>MySQL插数据</h3><p>MySQL从表A中读取数据插入到表B</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into B(&#39;字段a&#39;, &#39;字段b&#39;, &#39;字段c&#39;) select 字段a,字段b,字段c from A;</span><br></pre></td></tr></table></figure><h3 id="awk改数据"><a href="#awk改数据" class="headerlink" title="awk改数据"></a>awk改数据</h3><p>一个文件，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this is a dog</span><br><span class="line">this is a cat</span><br><span class="line">this is a pig</span><br></pre></td></tr></table></figure><p>最后一列改成xxx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F &#39; &#39; &#39;&#123;$4&#x3D;&quot;xxx&quot;;print $0&#125;&#39; awkfile.log</span><br></pre></td></tr></table></figure><h3 id="http和https区别"><a href="#http和https区别" class="headerlink" title="http和https区别"></a>http和https区别</h3><p>https协议需要向CA机构申请CA证书</p><p>s代表https传输是由SSL/TSL+HTTP构建，相对于http的无状态，https可进行身份验证，加密传输，更加安全。</p><h4 id="客户端使用https方式和web服务器通信步骤"><a href="#客户端使用https方式和web服务器通信步骤" class="headerlink" title="客户端使用https方式和web服务器通信步骤"></a>客户端使用https方式和web服务器通信步骤</h4><ol><li>   客户端用https格式url请求web服务端</li><li>   web服务器收到请求后，将网站的证书信息（包含公钥）传送一份给客户端</li><li>   客户端的浏览器和web服务器协商SSL/TSL连接的安全等级（信息加密等级）</li><li>   客户端浏览器根据安全等级，建立会话密钥，然后利用网站公钥将密钥加密，传给网站</li><li>   服务端用私钥解密</li></ol><h3 id="装饰器实现记录函数执行时间"><a href="#装饰器实现记录函数执行时间" class="headerlink" title="装饰器实现记录函数执行时间"></a>装饰器实现记录函数执行时间</h3><p>装饰器就是python中把函数当作参数的一种实现，目的是增强函数的功能，比如给函数增加执行日志，给函数增加执行时间等等</p><p>写一个装饰器，记录函数的执行时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*-coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2021&#x2F;3&#x2F;10 14:46</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from functools import wraps</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def get_time(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def decorators(*args, **kwargs):</span><br><span class="line">        now &#x3D; time.time()</span><br><span class="line">        f &#x3D; func(*args, **kwargs)</span><br><span class="line">        print(func.__name__ + &quot; was called&quot;)</span><br><span class="line">        after &#x3D; time.time()</span><br><span class="line">        time_use &#x3D; after - now</span><br><span class="line">        print(func.__name__ + &quot;执行时间为： &quot; + str(format(time_use, &#39;.5f&#39;)) + &quot;s&quot;)</span><br><span class="line">        return f</span><br><span class="line">        # return func.__name__ + &quot;执行时间为： &quot; + str(format(time_use, &#39;.5f&#39;)) + &quot;s&quot;</span><br><span class="line">    return decorators</span><br><span class="line"></span><br><span class="line">@get_time</span><br><span class="line">def get_test(x):</span><br><span class="line">    return x**8**6</span><br><span class="line"></span><br><span class="line">print(get_test(8))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get_test was called</span><br><span class="line">get_test执行时间为： 0.00349s</span><br><span class="line">一串很长的数字。。</span><br></pre></td></tr></table></figure><h4 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_log(level&#x3D;None):</span><br><span class="line">    def decorate_log(func):</span><br><span class="line">        @wraps(func)</span><br><span class="line">        def wrapper(*args, **kwargs):</span><br><span class="line">            start &#x3D; time.time()</span><br><span class="line">            f &#x3D; func(*args, **kwargs)</span><br><span class="line">            end &#x3D; time.time()</span><br><span class="line">            time_used &#x3D; end - start</span><br><span class="line">            if level &#x3D;&#x3D; &#39;info&#39;:</span><br><span class="line">                print(&quot;Info: &quot; + func.__name__ + &quot; 执行时间为：&quot; + format(time_used, &#39;0.4f&#39;))</span><br><span class="line">            elif level &#x3D;&#x3D; &#39;debug&#39;:</span><br><span class="line">                print(&quot;Debug: &quot; + func.__name__ + &quot; 执行时间为：&quot; + format(time_used, &#39;0.4f&#39;))</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;Msg: &quot; + func.__name__ + &quot; 执行时间为：&quot; + format(time_used, &#39;0.4f&#39;))</span><br><span class="line">            return f</span><br><span class="line">        return wrapper</span><br><span class="line">    return decorate_log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@get_log(level&#x3D;&#39;info&#39;)</span><br><span class="line">def calculate_num(n):</span><br><span class="line">    return n ** 6 ** 8</span><br><span class="line">    </span><br><span class="line">@get_log()</span><br><span class="line">def calculate_num_2(n):</span><br><span class="line">    return n ** 6 ** 8    </span><br></pre></td></tr></table></figure><p>装饰器带可选参数，指定不同的参数实现不同的增强效果</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;日常的一些知识点记录&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://spindriftks.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="mysql" scheme="https://spindriftks.github.io/tags/mysql/"/>
    
    <category term="https" scheme="https://spindriftks.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>质量管理-破窗效应</title>
    <link href="https://spindriftks.github.io/2021/03/09/%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86-%E7%A0%B4%E7%AA%97%E6%95%88%E5%BA%94/"/>
    <id>https://spindriftks.github.io/2021/03/09/%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86-%E7%A0%B4%E7%AA%97%E6%95%88%E5%BA%94/</id>
    <published>2021-03-09T05:16:06.000Z</published>
    <updated>2021-03-09T05:52:26.833Z</updated>
    
    <content type="html"><![CDATA[<p>破窗效应（Break Pane Law; Broken windows theory）</p><a id="more"></a><h3 id="破窗效应简介"><a href="#破窗效应简介" class="headerlink" title="破窗效应简介"></a>破窗效应简介</h3><p>破窗效应是犯罪学的一个理论，由詹姆士·威尔逊（James Q. Wilson）及乔治·凯林（George L. Kelling）提出，此理论认为环境中的不良现象如果被放任存在，会诱使人们仿效，甚至变本加厉。</p><p>一种现象：一幢楼有少许窗户玻璃是破碎的，如果不及时修理好，可能会有破坏者破坏更多的窗户。</p><p><strong>破窗效应倡导及时矫正或补救正在发生的问题</strong>，有点类似我国古代的智慧结晶：亡羊补牢，以及防微杜渐。</p><h3 id="破窗效应的危害"><a href="#破窗效应的危害" class="headerlink" title="破窗效应的危害"></a>破窗效应的危害</h3><p>破窗效应的理论表示环境对人的心理形成和行为表现具有强烈的暗示性和诱导性，破窗的出现会诱发人的四种心理：</p><ol><li>颓丧心理：坏了东西没人修，公共财产没人管，制度无人遵守，破坏规则不受惩罚；长此以往，对于团队、社会的信任度逐渐降低，以消极的情绪和言行工作和生活。</li><li>弃旧心理：既然已经破废，既然没人管，那就随它去吧；到企业内部，因为某项规章制度没有有效的执行下去就用放弃的心态去面对，那对团队管理会造成非常不利的影响。</li><li>从众心理：别人能做，我也能做；别人能拿，我也能拿。典型的例子就是考勤作弊行为。</li><li>投机心理：不想努力就要达到目的的心理，和从众类似，看到别人这样做当下没有“不良”后果，自己也要这么做。</li></ol><h3 id="软件行业的破窗效应"><a href="#软件行业的破窗效应" class="headerlink" title="软件行业的破窗效应"></a>软件行业的破窗效应</h3><p>当bug积累到一定程度，消除每一个bug都不是一件轻松的事情；并且由于一定程度上的bug互相影响，定位到某一个具体的bug就更加的困难。所以当bug数量到一定程度，无论是身体还是心理上都会产生解决bug的抗拒。</p><p>软件上的破窗效应产生的原因很好理解：原本存在着质量差的代码，后来人觉得既然前人可以这么写，也没有受到任何指责或惩罚，那我也可以这么做，久而久之就成了一座大的垃圾堆。<br>可惜最终发生雪崩的时候，没有一片雪花是无辜的，还是整个团队一起买单。</p><h3 id="破解破窗效应"><a href="#破解破窗效应" class="headerlink" title="破解破窗效应"></a>破解破窗效应</h3><p>从破窗效应的描述可以看出，一是有破窗，二是没有及时修复。所以破解破窗效应的方法也就是对应的：</p><ol><li>经营“好窗”，构建良好的环境，制定有益的规范；预防的成本永远是最低的，从根源上就有效的避免破窗的出现。</li><li>经常“护窗”，没有一项制度是没有缺陷的，需要个人、企业一起努力不断去反思完善，一旦发现了制度上的漏洞，及时修复。</li><li>及时“补窗”，也就是防微杜渐了。</li></ol><p>在软件行业，设计合理的架构，遵守合理的代码规范，日常开发中每次提交都尽量做到比前一个版本要干净，哪怕是减少一部分重复代码，修正一个格式问题。</p><blockquote><p>应用自：</p></blockquote><p><a href="https://wiki.mbalib.com/wiki/%E7%A0%B4%E7%AA%97%E6%95%88%E5%BA%94">MBA智库-破窗效应</a></p><p><a href="http://blog.itpub.net/69978212/viewspace-2702938/">质量内建七步法</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;破窗效应（Break Pane Law; Broken windows theory）&lt;/p&gt;</summary>
    
    
    
    <category term="团队管理" scheme="https://spindriftks.github.io/categories/%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="lives" scheme="https://spindriftks.github.io/tags/lives/"/>
    
  </entry>
  
  <entry>
    <title>软件项目常见风险</title>
    <link href="https://spindriftks.github.io/2021/03/08/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E5%B8%B8%E8%A7%81%E9%A3%8E%E9%99%A9/"/>
    <id>https://spindriftks.github.io/2021/03/08/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E5%B8%B8%E8%A7%81%E9%A3%8E%E9%99%A9/</id>
    <published>2021-03-08T07:35:07.000Z</published>
    <updated>2021-03-08T08:04:09.801Z</updated>
    
    <content type="html"><![CDATA[<p>软件项目中常见的一些风险</p><a id="more"></a><h3 id="Barry-Boehm-软件开发风险检查单"><a href="#Barry-Boehm-软件开发风险检查单" class="headerlink" title="Barry Boehm 软件开发风险检查单"></a>Barry Boehm 软件开发风险检查单</h3><p>软件风险前十列表基于Barry Boehm的著作《Tutorial on Software Risk Management》,IEEE Computer Society,1989</p><table><thead><tr><th>风险</th><th>风险缓解技术</th></tr></thead><tbody><tr><td>人员缺失</td><td>配置高技能员工；工作匹配；团队组建；培训和职业规划；关键人员尽早安排日程</td></tr><tr><td>不现实的时间和成本估计</td><td>多种估计技术；费用设计；增量开发；对过去项目的记录和分析；方法标准化</td></tr><tr><td>软件功能错误</td><td>提高软件评价；正式的规格说明方法；用户调查；原型；早期用户手册</td></tr><tr><td>用户界面错误</td><td>原型；任务分析；用户参与</td></tr><tr><td>镀金</td><td>需求清理；原型；成本-效益分析；费用设计</td></tr><tr><td>晚期需求变化</td><td>变更控制；高变更阈值；增量开发（变更推迟）</td></tr><tr><td>外购构件缺陷</td><td>基准化；审查；正式规格说明；正式合同；质量保证规程和证明</td></tr><tr><td>外部任务实现缺陷</td><td>质量保证规程；竞争设计或原型；正式合同</td></tr><tr><td>实时性能缺陷</td><td>模拟；基准化；原型；调整；技术分析</td></tr><tr><td>开发技术过难</td><td>技术分析；成本-效益分析；原型；员工培训和开发</td></tr></tbody></table><h3 id="Fairley的四种COTS软件购买风险"><a href="#Fairley的四种COTS软件购买风险" class="headerlink" title="Fairley的四种COTS软件购买风险"></a>Fairley的四种COTS软件购买风险</h3><p>Richard Fairley（1994）发表的”Risk management for software projects”，直接购买软件的风险</p><table><thead><tr><th>风险</th><th>风险描述</th></tr></thead><tbody><tr><td>集成</td><td>为不同的应用进行数据格式的统一和数据交换有困难</td></tr><tr><td>更新</td><td>当供应商更新软件之后，有可能不再满足用户最初的需求。坚持使用旧版本意味着丢失了供应商的技术支持</td></tr><tr><td>没有源代码</td><td>如果想改进系统，会因为没有源代码导致无法进行改进</td></tr><tr><td>供应商问题</td><td>产品供应商有可能不再从事该项业务或者被竞争对手并购</td></tr></tbody></table><h3 id="一些其他风险项"><a href="#一些其他风险项" class="headerlink" title="一些其他风险项"></a>一些其他风险项</h3><ol><li>客户群越大，风险越高（pv、用户数等）</li><li>系统操作越频繁，风险越高（方法被调用次数，引用次数等）</li><li>场景接近可用，风险越高（核心业务，主干功能）</li><li>场景失败给客户带来危害越大，风险越高（交易、支付等）</li><li>场景涉及信息安全和信息泄露，风险越高</li><li>系统可恢复性难度越大，风险越高</li><li>团队成熟度越低，风险越高</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;软件项目中常见的一些风险&lt;/p&gt;</summary>
    
    
    
    <category term="测试之道" scheme="https://spindriftks.github.io/categories/%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93/"/>
    
    
    <category term="lives" scheme="https://spindriftks.github.io/tags/lives/"/>
    
  </entry>
  
  <entry>
    <title>成年人的“正义”</title>
    <link href="https://spindriftks.github.io/2021/03/08/%E6%88%90%E5%B9%B4%E4%BA%BA%E7%9A%84%E2%80%9C%E6%AD%A3%E4%B9%89%E2%80%9D/"/>
    <id>https://spindriftks.github.io/2021/03/08/%E6%88%90%E5%B9%B4%E4%BA%BA%E7%9A%84%E2%80%9C%E6%AD%A3%E4%B9%89%E2%80%9D/</id>
    <published>2021-03-08T00:23:53.000Z</published>
    <updated>2021-03-08T01:32:09.093Z</updated>
    
    <content type="html"><![CDATA[<p>一些经历和自我坚持</p><a id="more"></a><p>学生时代我们或多或少都是棱角分明的热血青年，走上工作岗位之后，来自生活的压力、环境的同化、记忆的衰退等等，曾经的自己逐渐世故圆滑；其实也还好，满腔热血容易激动、冲动，没了棱角反而更注重三思而后行。只是，不要因此丢失了最基本的坚持</p><p>以下都是自己的亲身经历（自己选公司多多少少有点洁癖，受益于征信公司经历，事先会调查公司基本信息、创始人背景、市场规模、盈利模式、竞品情况；因此最后投递简历、面试、入职的公司在苏州也算是拿的出手、名声在外的，即使是这样的公司也会存在着各种奇葩情况，我也只能感慨下，资本时代不能只相信规模和估值，以及资本都是黑暗的。）</p><h3 id="经历一"><a href="#经历一" class="headerlink" title="经历一"></a>经历一</h3><p>某公司，面试通过了也发了offer，当时在上家公司还没真正走离职流程；该公司HR有一天找我，让我把现在公司某个系统的监控方案截图发给她，说是技术部想看一下我现在的成绩；就那一刻，我选择了拒绝这个offer。</p><p>同样是这个公司，不同的是这是我亲人的经历，她是做产品经理的；该公司HR邀请她去面试，面试完之后，我那亲人就找我一顿吐槽，给她面试的一看就是没有行业经验的，问的问题基本都是在套她现在公司的实现方案，想到该公司有传言要成立XX产品线，也就明白了。</p><p>这段经历我也不想表达的过于激愤，或许有的人会说互联网行业不存在抄袭，都是互相借鉴。还是要原谅我是被恶心到了，或许是我还是太天真，这类做法在我看来并没有体现任何正义，没有表现出一个公司该有的道德和价值观。</p><h3 id="经历二"><a href="#经历二" class="headerlink" title="经历二"></a>经历二</h3><p>某公司，行业龙头，国内市场占有率甚至是数一数二的存在。有一个项目，我负责性能测试，过程的各种内耗这边就不说了，是个公司应该都有这不是本次要表达的重点。测试结果很不理想，距离客户的要求差了十万八千里，就是这样，领导直接拍板（最高领导之一）改测试结果的数据，用P图和拉长性能曲线的方式来伪造测试结果，生成一个还算好看的测试报告给客户。</p><p>后续发展来了，客户毕竟不傻，知道这结果不可信，让该公司给个30/60/90天的改进目标。公司拉了好几号人研究定了这个目标，用正式的邮件回复了客户；整个改进过程只有PM和我在催开发人员改进，给领导反馈进度。结果呢，到了90天时候，连30天的目标都没有实现，就这样，领导就算是把事情揭过去了。事后，一个资深的PM离职了。</p><p>所以公司的规模和核心产品知名度真的不能成为评判一个公司好坏的标准。可能我不是高层，掌握的信息不够，也不懂得权衡各个项目，所以无法理解领导的决定。以我微不足道的观点，测试人员还是需要遵守基本的职业操守和道德底线，既然公司把我录用为测试，那我就需要对产品质量进行客观理性的评估，如果只是为了让我出一份报告，我是觉得完全可以随便找个会P图的就行了。公司的发展、经营真的不能只看销售队伍，守业是需要自上而下的高质量服务的；联想前段时间德勤员工实名举报造假，会计行业是这样，测试一样会遇到这样的情况，个人觉得，还是遵守你的职业道德吧。</p><h3 id="经历三"><a href="#经历三" class="headerlink" title="经历三"></a>经历三</h3><p>这段经历和公司关系没那么大，主角是个人。先说背景，领导和普调员工分部在不同的楼层办公，平时见不到。<br>某年度优秀员工A，平时上班大多数情况是让其他同事代打卡，8:30上班时间，10点，11点到，中午继续失踪一下午，晚上下班之后回家顺路来打个卡，看工作时长甚至出现天天辛苦加班的假象。这样的，拿了年度优秀员工。</p><p>某年度优秀员工B，因为是组织架构原因是没有本部的一些门禁和食堂免费就餐权限；这位同事用手机复制了有权限员工的卡，至于做什么，就不用细说了吧。某天闲聊我问起这些，大多数人的概念都是给他们免费的，不拿就是傻的意思。</p><p>至于还有的其他奇葩人和事，不列举了。</p><h3 id="说回自己"><a href="#说回自己" class="headerlink" title="说回自己"></a>说回自己</h3><p>感觉自己要成一个充斥着负面情绪的人了，很不理解某些人、某些企业的做法，也许他们都能最后得到资本的青睐，最后实现经济上的成功，但我清楚的知道这些我骨子里不认可。</p><p>自己是个什么样的人？学生时代直到工作至今，从未迟到过一次，对于时间有着近乎病态的执着。也成家了，知道金钱的好，但是坚持不坑蒙拐骗，不偷不抢，只拿真的属于自己的那份。对于未来，有期许有焦虑，相信世界终究很美好，也深知逆水行舟不进则退。</p><p>成年人的正义，做一行爱一行，努力提升自己，发自内心的热爱你的事业、热爱和感恩提供给你机会的公司，共同成长；坚守本心，做一个诚实、诚信、坚持、对世界充满好奇心、有担当的人。<br>（衷心祝愿所有人都能有个圆满的归宿，所有公司都能谨守自己公布的企业价值观）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一些经历和自我坚持&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="https://spindriftks.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="lives" scheme="https://spindriftks.github.io/tags/lives/"/>
    
  </entry>
  
  <entry>
    <title>关于员工管理几点记录</title>
    <link href="https://spindriftks.github.io/2021/03/03/%E5%85%B3%E4%BA%8E%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E5%87%A0%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    <id>https://spindriftks.github.io/2021/03/03/%E5%85%B3%E4%BA%8E%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E5%87%A0%E7%82%B9%E8%AE%B0%E5%BD%95/</id>
    <published>2021-03-03T00:35:15.000Z</published>
    <updated>2021-03-03T00:50:37.305Z</updated>
    
    <content type="html"><![CDATA[<p>关于团队中员工管理方法的一些记录，纸上谈兵型…</p><a id="more"></a><h3 id="工作安排"><a href="#工作安排" class="headerlink" title="工作安排"></a>工作安排</h3><p>团队中员工日常工作有幸福感和激情，恰当的方式之一是团队领导自上而下的拆分完大项任务，让员工自行自下而上的“任务认领”，甚至引导员工自发生成任务，积极引导员工思考。</p><h3 id="工程师文化"><a href="#工程师文化" class="headerlink" title="工程师文化"></a>工程师文化</h3><p>关于团队组建和日常工作，来自奈飞的成年人文化。</p><ol><li>只招能够管理好自己的人</li><li>每个人都要理解公司的业务</li><li>坦诚，意见当面讲</li><li>只有事实才能捍卫观点</li><li>录用员工取决于解决问题的方式</li><li>按员工带来的价值付薪</li><li>不挽留不应该挽留的员工</li><li>面向未来组建团队</li></ol><p>对于个人来说，更换一份工作的求职面试是一次投资；对企业来说，面试招录员工是一次未来发展的机会。</p><h3 id="热炉法则"><a href="#热炉法则" class="headerlink" title="热炉法则"></a>热炉法则</h3><p>关于奖励和处罚</p><ul><li>奖励要奖励基层员工</li><li>处罚要处罚中高层领导</li></ul><p>关注核心利益，以核心利益驱动制度遵守（例如不做codereview出现线上事故第一责任人是开发）</p><h3 id="黄金圈法则"><a href="#黄金圈法则" class="headerlink" title="黄金圈法则"></a>黄金圈法则</h3><p>最好的管理工具是问 why<br>对事物本身要赋予足够的意义，多问“我想做什么”，“我为什么要做”，以足够的意义去驱动更好的行动</p><h3 id="预期管理"><a href="#预期管理" class="headerlink" title="预期管理"></a>预期管理</h3><ol><li>多个好消息，分开发布：延迟幸福感的长度</li><li>多个坏消息，一起发布：降低心理损失感</li><li>一个大的坏消息和一个小的好消息，分别发布：低承诺，高交付</li><li>一个大的好消息和一个小的坏消息，一起发布：降低幸福的底线，让辛福感更强烈</li></ol><h3 id="工作管理"><a href="#工作管理" class="headerlink" title="工作管理"></a>工作管理</h3><p>工作时间划分<br>准备阶段：60%<br>执行阶段：20%<br>总结复盘：10%<br>下阶段规划：10%</p><p>行百里者半九十</p><p>以上，完~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于团队中员工管理方法的一些记录，纸上谈兵型…&lt;/p&gt;</summary>
    
    
    
    <category term="团队管理" scheme="https://spindriftks.github.io/categories/%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="以人为本" scheme="https://spindriftks.github.io/tags/%E4%BB%A5%E4%BA%BA%E4%B8%BA%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>python定义类加不加object区别</title>
    <link href="https://spindriftks.github.io/2021/02/26/python%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E4%B8%8D%E5%8A%A0object%E5%8C%BA%E5%88%AB/"/>
    <id>https://spindriftks.github.io/2021/02/26/python%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E4%B8%8D%E5%8A%A0object%E5%8C%BA%E5%88%AB/</id>
    <published>2021-02-26T01:03:42.000Z</published>
    <updated>2021-02-26T01:17:38.664Z</updated>
    
    <content type="html"><![CDATA[<p>python定义类时候加不加object区别</p><a id="more"></a><h3 id="python-2-x"><a href="#python-2-x" class="headerlink" title="python 2.x"></a>python 2.x</h3><p>python2有经典类（旧式类）<code>old-style(classic-style)</code>和新式类<code>new-style</code>的区别</p><p>写法分别为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">  ...</span><br><span class="line">和</span><br><span class="line">class A(object):</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>继承object类的类就是新式类，目的就是让自己定义的类有更多的属性（因为本地只有python 3演示不了python 2不继承object类的效果，大概的输出：dir()只能输出<code>&#39;__doc__&#39;, &#39;__module__&#39;</code>两个属性，也就是说这个类的命名空间里面只有这两个属性可以操作）</p><h3 id="python-3-x"><a href="#python-3-x" class="headerlink" title="python 3.x"></a>python 3.x</h3><p>python 3.x默认是继承object类的，不需要声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*-coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2021&#x2F;2&#x2F;26 8:52</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class WithoutObject:</span><br><span class="line">    # python3.x 默认继承object类</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class WithObject1():</span><br><span class="line">    # 类无继承情况下，括号可写可不写，python3.x默认继承了object类</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class WithObject2(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    x &#x3D; WithoutObject(&#39;Alice&#39;)</span><br><span class="line">    print(x, dir(x))</span><br><span class="line"></span><br><span class="line">    y &#x3D; WithObject1(&#39;Bob&#39;)</span><br><span class="line">    print(y, dir(y))</span><br><span class="line"></span><br><span class="line">    z &#x3D; WithObject2(&#39;Carl&#39;)</span><br><span class="line">    print(z, dir(z))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Alice [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;name&#39;]</span><br><span class="line"></span><br><span class="line">Bob [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;name&#39;]</span><br><span class="line"></span><br><span class="line">Carl [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;name&#39;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了养成良好的习惯，在定义类的时候，没有特定继承不妨也写出object类算是对自己的一个提示，该类的命名空间有哪些属性是可以操作的。</p><p>以上，完~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python定义类时候加不加object区别&lt;/p&gt;</summary>
    
    
    
    <category term="python基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python3" scheme="https://spindriftks.github.io/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>k8s踏坑记 第二篇</title>
    <link href="https://spindriftks.github.io/2021/02/03/k8s%E8%B8%8F%E5%9D%91%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AF%87/"/>
    <id>https://spindriftks.github.io/2021/02/03/k8s%E8%B8%8F%E5%9D%91%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AF%87/</id>
    <published>2021-02-03T05:37:11.000Z</published>
    <updated>2021-02-03T05:49:18.507Z</updated>
    
    <content type="html"><![CDATA[<p>master和node在同一台虚拟机，外部网络无法访问k8s配置好的service暴露的端口</p><a id="more"></a><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line">Kubernetes v1.5.2</span><br><span class="line">Docker version 1.13.1, build 0be3e21&#x2F;1.13.1</span><br></pre></td></tr></table></figure><p>单机搭建master加node</p><p>tomcat-deployment.yaml内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      tier: tomcat</span><br><span class="line">    matchExpressions:</span><br><span class="line">    - &#123;key: tier, operator: In, values: [tomcat]&#125;</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: tomcat-demo</span><br><span class="line">        tier: tomcat</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: tomcat-demo</span><br><span class="line">        image: tomcat</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080 </span><br></pre></td></tr></table></figure><p>tomcat-service.yaml内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-service</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8080</span><br><span class="line">    nodePort: 31002</span><br><span class="line">  selector:</span><br><span class="line">    tier: tomcat</span><br><span class="line">    app: tomcat-demo</span><br></pre></td></tr></table></figure><p>用<code>kubectl get pods</code>看状态正常，<code>kubectl describe pod xxx</code>也正常，就是<code>docker exec -it xxx /bin/bash</code>进容器看日志也正常，虚拟机内直接<code>curl http://127.0.0.1:31002</code>也是正常有访问的，并且虚拟机的防火墙也是关着的（用<code>docker run -d -p 31002:8080 --name xxx tomcat</code>直接起容器就可以访问）</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>排查一圈之后，实在没办法，上网搜。解决办法，虚拟机内执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure><p>完了就全正常了。。</p><p><a href="https://github.com/kubernetes/kubernetes/issues/40182">参考链接</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;master和node在同一台虚拟机，外部网络无法访问k8s配置好的service暴露的端口&lt;/p&gt;</summary>
    
    
    
    <category term="容器化" scheme="https://spindriftks.github.io/categories/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    
    <category term="k8s" scheme="https://spindriftks.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s踏坑记 第一篇</title>
    <link href="https://spindriftks.github.io/2021/02/02/k8s%E8%B8%8F%E5%9D%91%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>https://spindriftks.github.io/2021/02/02/k8s%E8%B8%8F%E5%9D%91%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AF%87/</id>
    <published>2021-02-02T07:06:55.000Z</published>
    <updated>2021-02-02T08:34:08.276Z</updated>
    
    <content type="html"><![CDATA[<p>开始还欠下的Kubernetes的债</p><a id="more"></a><p>首先是照着书敲《Kubernetes权威指南》，国人写的，写这篇文章时候看到了第一章第四节，不想吐槽了，专注记录坑</p><h3 id="搭建单机版kubernetes集群"><a href="#搭建单机版kubernetes集群" class="headerlink" title="搭建单机版kubernetes集群"></a>搭建单机版kubernetes集群</h3><h4 id="关防火墙"><a href="#关防火墙" class="headerlink" title="关防火墙"></a>关防火墙</h4><p>实在是偷懒的做法，纯测试用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 关闭</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"># 取消自启动</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h4 id="装etcd和k8s"><a href="#装etcd和k8s" class="headerlink" title="装etcd和k8s"></a>装etcd和k8s</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y etcd kubernetes</span><br></pre></td></tr></table></figure><h4 id="按顺序起服务"><a href="#按顺序起服务" class="headerlink" title="按顺序起服务"></a>按顺序起服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl start etcd</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl start kube-apiserver</span><br><span class="line">systemctl start kube-controller-manager</span><br><span class="line">systemctl start kube-scheduler</span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl start kube-proxy</span><br></pre></td></tr></table></figure><h3 id="启mysql服务"><a href="#启mysql服务" class="headerlink" title="启mysql服务"></a>启mysql服务</h3><h4 id="创建pod"><a href="#创建pod" class="headerlink" title="创建pod"></a>创建pod</h4><p>创建<code>mysql-rc.yaml</code>，内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1  #指定api版本，此值必须在kubectl apiversion中</span><br><span class="line">kind: ReplicationController   #指定创建资源的类型或者角色，这里是副本控制器 RC</span><br><span class="line">metadata:       #资源的元数据&#x2F;属性</span><br><span class="line">  name: mysql</span><br><span class="line">spec:           #specification of the resource content</span><br><span class="line">  replicas: 1   #Pod副本期待数量</span><br><span class="line">  selector:</span><br><span class="line">    app: mysql  #通过这个标签找到生产的Pod</span><br><span class="line">  template:  　 #根据此模版创建Pod的副本(实例)</span><br><span class="line">    metadata:</span><br><span class="line">      labels:   #设定资源的标签     </span><br><span class="line">        app: mysql  #Pod副本拥有的标签，对应RC的selector中app: mysql</span><br><span class="line">    spec:</span><br><span class="line">      containers:   #Pod内容器的定义部分</span><br><span class="line">      - name: mysql   #容器的名称</span><br><span class="line">        image: mysql  #容器对应的Docker Image</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 3306 #容器应用监听的端口号</span><br><span class="line">        env:                 #注入容器内的环境变量</span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: &quot;123456&quot;</span><br></pre></td></tr></table></figure><p>发布到k8s集群，在master节点执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f mysql-rc.yaml</span><br></pre></td></tr></table></figure><p><code>replicationcontroller &quot;mysql&quot; created</code>创建完成<br>查看RC：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get rc</span><br><span class="line"></span><br><span class="line">NAME      DESIRED   CURRENT   READY     AGE</span><br><span class="line">mysql     1         1         0         1m</span><br></pre></td></tr></table></figure><p>查看pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><h5 id="坑一"><a href="#坑一" class="headerlink" title="坑一"></a>坑一</h5><p>查看pod，显示<code>No resources found.</code>，搜了一圈，要修改个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;kubernetes&#x2F;apiserver</span><br></pre></td></tr></table></figure><p><strong>KUBE_ADMISSION_CONTROL</strong>项，去掉SecurityContextDeny,ServiceAccount，修改完成：<code> KUBE_ADMISSION_CONTROL=&quot;--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota&quot;</code><br>重启kube-apiserver：<code>systemctl restart kube-apiserver</code></p><p>重新创建RC，查看pod：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line">NAME          READY     STATUS              RESTARTS   AGE</span><br><span class="line">mysql-gjg9h   0&#x2F;1       ContainerCreating   0          1m</span><br></pre></td></tr></table></figure><h5 id="坑二"><a href="#坑二" class="headerlink" title="坑二"></a>坑二</h5><p>查看pod状态，发现永远是ContainerCreating状态，查看日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs mysql-gjg9h</span><br><span class="line"></span><br><span class="line">Error from server (BadRequest): container &quot;mysql&quot; in pod &quot;mysql-gjg9h&quot; is waiting to start: ContainerCreating</span><br></pre></td></tr></table></figure><p>就这一句话。用<code>kubectl describe pod xxx</code>查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod mysql-gjg9h</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line">Events:</span><br><span class="line">  FirstSeenLastSeenCountFromSubObjectPathTypeReasonMessage</span><br><span class="line">  ------------------------------------------------------------</span><br><span class="line">  7m7m1&#123;default-scheduler &#125;NormalScheduledSuccessfully assigned mysql-gjg9h to 127.0.0.1</span><br><span class="line">  7m1m6&#123;kubelet 127.0.0.1&#125;WarningFailedSyncError syncing pod, skipping: failed to &quot;StartContainer&quot; for &quot;POD&quot; with ErrImagePull: &quot;image pull failed for registry.access.redhat.com&#x2F;rhel7&#x2F;pod-infrastructure:latest, this may be because there are no credentials on this request.  details: (open &#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;registry.access.redhat.com&#x2F;redhat-ca.crt: no such file or directory)&quot;</span><br><span class="line"></span><br><span class="line">  6m0s26&#123;kubelet 127.0.0.1&#125;WarningFailedSyncError syncing pod, skipping: failed to &quot;StartContainer&quot; for &quot;POD&quot; with ImagePullBackOff: &quot;Back-off pulling image \&quot;registry.access.redhat.com&#x2F;rhel7&#x2F;pod-infrastructure:latest\&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到这个报错，首先尝试拉<code>docker pull registry.access.redhat.com/rhel7/pod-infrastructure:latest</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Trying to pull repository registry.access.redhat.com&#x2F;rhel7&#x2F;pod-infrastructure ... </span><br><span class="line">open &#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;registry.access.redhat.com&#x2F;redhat-ca.crt: no such file or directory</span><br></pre></td></tr></table></figure><p>报了个这个。。</p><p>进去报没有文件的这个路径查看这个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@QA ~]# cd &#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;registry.access.redhat.com</span><br><span class="line">[root@QA registry.access.redhat.com]# ll</span><br><span class="line">总用量 0</span><br><span class="line">lrwxrwxrwx. 1 root root 27 2月   2 10:10 redhat-ca.crt -&gt; &#x2F;etc&#x2F;rhsm&#x2F;ca&#x2F;redhat-uep.pem</span><br></pre></td></tr></table></figure><p>发现是个软链接，安装对应的：<code>yum install *rhsm*</code><br>安装完成，重新尝试拉镜像：<code>docker pull registry.access.redhat.com/rhel7/pod-infrastructure:latest</code></p><p>发现还是报失败</p><p>重新找了个办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl s_client -showcerts -servername registry.access.redhat.com -connect registry.access.redhat.com:443 &lt;&#x2F;dev&#x2F;null 2&gt;&#x2F;dev&#x2F;null | openssl x509 -text &gt; &#x2F;etc&#x2F;rhsm&#x2F;ca&#x2F;redhat-uep.pem</span><br></pre></td></tr></table></figure><p>上面命令执行完之后再拉镜像:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@QA registry.access.redhat.com]# docker pull registry.access.redhat.com&#x2F;rhel7&#x2F;pod-infrastructure:latest</span><br><span class="line">Trying to pull repository registry.access.redhat.com&#x2F;rhel7&#x2F;pod-infrastructure ... </span><br><span class="line">latest: Pulling from registry.access.redhat.com&#x2F;rhel7&#x2F;pod-infrastructure</span><br><span class="line">26e5ed6899db: Pull complete </span><br><span class="line">66dbe984a319: Pull complete </span><br><span class="line">9138e7863e08: Pull complete </span><br><span class="line">Digest: sha256:92d43c37297da3ab187fc2b9e9ebfb243c1110d446c783ae1b989088495db931</span><br><span class="line">Status: Image is up to date for registry.access.redhat.com&#x2F;rhel7&#x2F;pod-infrastructure:latest</span><br></pre></td></tr></table></figure><p>成功。<br>删除RC，删除pod，重新发布：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f mysql-rc.yaml</span><br><span class="line"># 验证</span><br><span class="line">kubectl get rc</span><br><span class="line">kubectl get pod </span><br></pre></td></tr></table></figure><p>因为压根没有部署pod成功，所以删除pod时候，只需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod mysql-xxxx</span><br></pre></td></tr></table></figure><p>就行了，如果是部署成功的，还需要查出deployment再删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment</span><br><span class="line">kubectl delete deployment xxx</span><br></pre></td></tr></table></figure><p>发布到kubernetes集群里：<code>kubectl create -f mysql-rc.yaml</code></p><p>这次发现还是没成功创建pod，继续describe：<code>Error syncing pod, skipping: failed to &quot;StartContainer&quot; for &quot;mysql&quot; with ErrImagePull: &quot;net/http: request canceled&quot; </code><br>看这样子，是拉镜像时候网络超时了，配置新的镜像加速器<code>vim /etc/docker/daemon.json</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启docker： <code>systemctl restart docker</code></p><p>继续删除rc，删除pod，重新发布<br>视本地网络因素（拉镜像），等n久之后查看pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@QA myweb]# kubectl get pods</span><br><span class="line"></span><br><span class="line">NAME          READY     STATUS    RESTARTS   AGE</span><br><span class="line">mysql-4cvj5   1&#x2F;1       Running   0          13s</span><br></pre></td></tr></table></figure><p>终于成功了。。。</p><h4 id="创建kubernetes-service"><a href="#创建kubernetes-service" class="headerlink" title="创建kubernetes service"></a>创建kubernetes service</h4><p>上述完成之后，创建一个和这个pod关联的kubernetes service<br>创建<code>mysql-svc.yaml</code>文件，内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 3306</span><br><span class="line">  selector:</span><br><span class="line">    app: mysql</span><br></pre></td></tr></table></figure><p>创建service：<code>kubectl create -f musql-svc.yaml</code><br>查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@QA myweb]# kubectl get svc</span><br><span class="line"></span><br><span class="line">NAME         CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes   10.254.0.1      &lt;none&gt;        443&#x2F;TCP    2h</span><br><span class="line">mysql        10.254.151.22   &lt;none&gt;        3306&#x2F;TCP   11s</span><br></pre></td></tr></table></figure><p>其中<strong>CLUSTER-IP</strong> 是一个虚拟的IP地址，由于Service（一个Service通常有多个相关的服务进程组成，kubernetes使用一组虚拟的IP和端口让用户连接到指定的service上）一旦创建就不会变化，所以不管后台有多少服务进程，也不管某个服务进程是否会由于发生故障或者部署到其他机器，都不需要因为业务服务进程的变更而去变更其他系统配置。</p><p>以上就是使用kubernetes启动一个服务（rc，service）需要的操作。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;开始还欠下的Kubernetes的债&lt;/p&gt;</summary>
    
    
    
    <category term="容器化" scheme="https://spindriftks.github.io/categories/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    
    <category term="k8s" scheme="https://spindriftks.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>python遍历嵌套列表</title>
    <link href="https://spindriftks.github.io/2021/01/22/python%E9%81%8D%E5%8E%86%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8/"/>
    <id>https://spindriftks.github.io/2021/01/22/python%E9%81%8D%E5%8E%86%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8/</id>
    <published>2021-01-22T03:03:48.000Z</published>
    <updated>2021-01-22T03:09:09.718Z</updated>
    
    <content type="html"><![CDATA[<p>用生成器函数遍历一个嵌套列表</p><a id="more"></a><p>假设有如下嵌套列表：</p><p><code>items = [1, 2, [3, 4, [5, 6], 7], 8]</code></p><p>想要把列表中所有元素输出为一系列单独的值（而不是有的是值，有的是子列表）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from collections import Iterable</span><br><span class="line"></span><br><span class="line">def get_index(items, ignore_type&#x3D;(str, bytes)):</span><br><span class="line">    for x in items:</span><br><span class="line">        if isinstance(x, Iterable) and not isinstance(x, ignore_type):</span><br><span class="line">            yield from get_index(x)</span><br><span class="line">        else:</span><br><span class="line">            yield x</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">for x in get_index(items):</span><br><span class="line">    print(x)</span><br><span class="line">    </span><br><span class="line"># 输出</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>使用isinstance判断子元素是否可迭代，如果可迭代，使用yield from将这个可迭代对象进行递归，直到所有元素产出</p><p>该方法来自《Python Cookbook》一书</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;用生成器函数遍历一个嵌套列表&lt;/p&gt;</summary>
    
    
    
    <category term="python基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python" scheme="https://spindriftks.github.io/tags/python/"/>
    
    <category term="python3" scheme="https://spindriftks.github.io/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>python根据字典值排序</title>
    <link href="https://spindriftks.github.io/2021/01/20/python%E6%A0%B9%E6%8D%AE%E5%AD%97%E5%85%B8%E5%80%BC%E6%8E%92%E5%BA%8F/"/>
    <id>https://spindriftks.github.io/2021/01/20/python%E6%A0%B9%E6%8D%AE%E5%AD%97%E5%85%B8%E5%80%BC%E6%8E%92%E5%BA%8F/</id>
    <published>2021-01-20T02:48:34.000Z</published>
    <updated>2021-01-20T03:04:02.068Z</updated>
    
    <content type="html"><![CDATA[<p>根据字典的值对字典进行排序</p><a id="more"></a><p>示例字典：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">prices &#x3D; &#123;</span><br><span class="line">    &#39;ACME&#39;: 45.23,</span><br><span class="line">    &#39;AAPL&#39;: 612.78,</span><br><span class="line">    &#39;IBM&#39;: 205.55,</span><br><span class="line">    &#39;HPQ&#39;: 37.2,</span><br><span class="line">    &#39;FB&#39;: 10.75</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按键排序"><a href="#按键排序" class="headerlink" title="按键排序"></a>按键排序</h3><p>正常sorted都是对键进行排序，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(sorted(prices.items()))</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">[(&#39;AAPL&#39;, 612.78), (&#39;ACME&#39;, 45.23), (&#39;FB&#39;, 10.75), (&#39;HPQ&#39;, 37.2), (&#39;IBM&#39;, 205.55)]</span><br></pre></td></tr></table></figure><p>是根据键的字母顺序排序</p><h3 id="值最大值和最小值"><a href="#值最大值和最小值" class="headerlink" title="值最大值和最小值"></a>值最大值和最小值</h3><p>类似示例字典，值是个数字，如果要对字典的值求最大和最小值，简单的办法就是反转字典，键变成值，值变成键，<code>zip（）</code>正好可以做到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">min_price &#x3D; min(zip(prices.values(), prices.keys()))</span><br><span class="line">max_price &#x3D; max(zip(prices.values(), prices.keys()))</span><br><span class="line">print(min_price)</span><br><span class="line">print(max_price)</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">(10.75, &#39;FB&#39;)</span><br><span class="line">(612.78, &#39;AAPL&#39;)</span><br></pre></td></tr></table></figure><h3 id="按值排序"><a href="#按值排序" class="headerlink" title="按值排序"></a>按值排序</h3><h4 id="方案一：-反转键值再排序"><a href="#方案一：-反转键值再排序" class="headerlink" title="方案一： 反转键值再排序"></a>方案一： 反转键值再排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">price_sort &#x3D; dict(sorted(zip(prices.values(), prices.keys())))</span><br><span class="line">print(dict(zip(price_sort.values(), price_sort.keys())))</span><br><span class="line"></span><br><span class="line"># 输出：</span><br><span class="line">&#123;&#39;FB&#39;: 10.75, &#39;HPQ&#39;: 37.2, &#39;ACME&#39;: 45.23, &#39;IBM&#39;: 205.55, &#39;AAPL&#39;: 612.78&#125;</span><br></pre></td></tr></table></figure><p>先反转键值对再排序，排序完成再反转回去</p><h4 id="方案二：使用匿名函数"><a href="#方案二：使用匿名函数" class="headerlink" title="方案二：使用匿名函数"></a>方案二：使用匿名函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sort_dict &#x3D; sorted(prices.items(), key&#x3D;lambda item:item[1])</span><br><span class="line">print(dict(sort_dict))</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">&#123;&#39;FB&#39;: 10.75, &#39;HPQ&#39;: 37.2, &#39;ACME&#39;: 45.23, &#39;IBM&#39;: 205.55, &#39;AAPL&#39;: 612.78&#125;</span><br></pre></td></tr></table></figure><p>sorted的key值，指定字典项的第二个值，也就是字典的值</p><h4 id="方案三：自定义获取key的函数"><a href="#方案三：自定义获取key的函数" class="headerlink" title="方案三：自定义获取key的函数"></a>方案三：自定义获取key的函数</h4><p>思路就是：<br>    1.对values进行排序<br>    2.遍历排序完的values列表<br>    3.构造空字典，按照上一步遍历的value插入原来字典对应的key和value<br>这边就需要自己构造一个根据value获取key的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_key(dict, value):</span><br><span class="line">    # return (k for k,v in dict.items() if v &#x3D;&#x3D; value)</span><br><span class="line">    for k, v in dict.items():</span><br><span class="line">        if v &#x3D;&#x3D; value:</span><br><span class="line">            return k</span><br></pre></td></tr></table></figure><p>排序实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">for i in sorted(prices.values()):</span><br><span class="line">    d[get_key(prices, i)] &#x3D; i</span><br><span class="line"></span><br><span class="line">print(d)</span><br><span class="line"># 输出</span><br><span class="line">&#123;&#39;FB&#39;: 10.75, &#39;HPQ&#39;: 37.2, &#39;ACME&#39;: 45.23, &#39;IBM&#39;: 205.55, &#39;AAPL&#39;: 612.78&#125;</span><br></pre></td></tr></table></figure><p>以上，完~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;根据字典的值对字典进行排序&lt;/p&gt;</summary>
    
    
    
    <category term="python基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python" scheme="https://spindriftks.github.io/tags/python/"/>
    
    <category term="python3" scheme="https://spindriftks.github.io/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>修改docker数据目录</title>
    <link href="https://spindriftks.github.io/2021/01/15/%E4%BF%AE%E6%94%B9docker%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/"/>
    <id>https://spindriftks.github.io/2021/01/15/%E4%BF%AE%E6%94%B9docker%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/</id>
    <published>2021-01-15T02:23:07.000Z</published>
    <updated>2021-01-15T02:47:20.803Z</updated>
    
    <content type="html"><![CDATA[<p>修改docker默认数据目录（镜像和启动容器过多造成磁盘满载情况）</p><a id="more"></a><p>版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Centos 7</span><br><span class="line">Docker</span><br><span class="line">Server Version: 20.10.2</span><br><span class="line">Storage Driver: overlay2</span><br></pre></td></tr></table></figure><ol><li>停服务 <code>systemctl stop docker</code></li><li>挂载数据盘，建数据文件夹  <code>/home/docker_data</code></li><li>备份     <code>tar -zcvf /home/docker_data/docker_bak.tar.gz /var/lib/docker/</code></li><li>建立软链接 <code>ln -s /home/docker_data /var/lib/docker</code></li><li>修改（新增）配置 <strong>/etc/docker/daemon</strong> ,<code>vim /etc/docker/daemon.json</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;],</span><br><span class="line">  &quot;data-root&quot;: &quot;&#x2F;home&#x2F;docker_data&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>重新加载配置，重启<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li>查看修改  <code>docker info</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Docker Root Dir: &#x2F;home&#x2F;docker_data</span><br><span class="line">Registry Mirrors:</span><br><span class="line"> http:&#x2F;&#x2F;hub-mirror.c.163.com&#x2F;</span><br></pre></td></tr></table></figure>以上，完~</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;修改docker默认数据目录（镜像和启动容器过多造成磁盘满载情况）&lt;/p&gt;</summary>
    
    
    
    <category term="容器化" scheme="https://spindriftks.github.io/categories/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    
    <category term="docker" scheme="https://spindriftks.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>sed和awk记录</title>
    <link href="https://spindriftks.github.io/2021/01/12/sed%E5%92%8Cawk%E8%AE%B0%E5%BD%95/"/>
    <id>https://spindriftks.github.io/2021/01/12/sed%E5%92%8Cawk%E8%AE%B0%E5%BD%95/</id>
    <published>2021-01-12T06:54:32.000Z</published>
    <updated>2021-01-12T08:24:23.645Z</updated>
    
    <content type="html"><![CDATA[<p>从学Linux开始，这俩就一直学学忘忘，记录下sed和awk的初阶使用</p><a id="more"></a><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p>sed编辑器全程流处理编辑器<code>stream editor，</code>流处理编辑器会在编辑器处理数据之前基于预先提供的一组规则来编辑数据流。sed预先设计的命令，要么从命令行输入，要么存储在命令文件里。<br><strong>sed不会修改原文件</strong></p><p>具体执行步骤：</p><ul><li>一次从输入中读取一行数据</li><li>根据所提供的编辑器命令匹配数据</li><li>按照命令修改流中的数据</li><li>将新的数据输出到STDOUT</li></ul><p>格式： <code> sed option script file</code></p><p>选项：</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-e script</td><td>将script中指定的命令添加到已有命令中</td></tr><tr><td>-f file</td><td>将file中指定的命令添加到已有命令中</td></tr><tr><td>-n</td><td>不产生命令输出，一般和p配合使用</td></tr><tr><td></td><td></td></tr></tbody></table><h4 id="执行编辑器命令"><a href="#执行编辑器命令" class="headerlink" title="执行编辑器命令"></a>执行编辑器命令</h4><h5 id="命令行定义编辑器命令"><a href="#命令行定义编辑器命令" class="headerlink" title="命令行定义编辑器命令"></a>命令行定义编辑器命令</h5><p><code>echo &quot;This is a test&quot; | sed &#39;s/test/cat/&#39;</code></p><p>替换test为cat</p><h5 id="命令行定义多个编辑器命令"><a href="#命令行定义多个编辑器命令" class="headerlink" title="命令行定义多个编辑器命令"></a>命令行定义多个编辑器命令</h5><p><code>echo &quot;This is a test&quot; | sed &#39;s/a/two/; s/test/cats/&#39;</code></p><p>多个命令之间用分号隔开</p><h5 id="从文件读取编辑器命令"><a href="#从文件读取编辑器命令" class="headerlink" title="从文件读取编辑器命令"></a>从文件读取编辑器命令</h5><p>cat script.sed</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s&#x2F;a&#x2F;two&#x2F;</span><br><span class="line">s&#x2F;test&#x2F;cats&#x2F;</span><br></pre></td></tr></table></figure><p><code>sed -f script.sed data1.txt</code></p><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><h5 id="替换标记"><a href="#替换标记" class="headerlink" title="替换标记"></a>替换标记</h5><p>格式：<code>s/pattern/replacement/flags</code></p><table><thead><tr><th>标记</th><th>描述</th></tr></thead><tbody><tr><td>数字</td><td>新文本将替换第几处模式匹配的地方</td></tr><tr><td>g</td><td>新文本会替换所有匹配的文本</td></tr><tr><td>p</td><td>输出修改过的行</td></tr><tr><td>w file</td><td>将替换结果写入file文件</td></tr><tr><td></td><td></td></tr></tbody></table><h5 id="指定匹配数替换"><a href="#指定匹配数替换" class="headerlink" title="指定匹配数替换"></a>指定匹配数替换</h5><p><code>sed &#39;s/test/cat/2&#39; data.txt</code></p><p>替换每行第二次匹配的test为cat</p><h5 id="打印修改过的内容"><a href="#打印修改过的内容" class="headerlink" title="打印修改过的内容"></a>打印修改过的内容</h5><p><code>sed -n &#39;s/test/cat/p&#39; data.txt</code></p><p>-n不产生命令输出，p输出修改过的行，合在一起，只输出修改过的行</p><h5 id="写更改内容"><a href="#写更改内容" class="headerlink" title="写更改内容"></a>写更改内容</h5><p><code>sed &#39;s/test/cat/w test.txt&#39; data.txt</code></p><p>将涉及到test改为cat的行，写到text.txt文件中</p><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>sed提供两种形式的过滤</p><ul><li>以行数字形式的行区间过滤</li><li>文本形式的行过滤</li></ul><h5 id="行地址过滤"><a href="#行地址过滤" class="headerlink" title="行地址过滤"></a>行地址过滤</h5><h6 id="单行号"><a href="#单行号" class="headerlink" title="单行号"></a>单行号</h6><p><code>sed &#39;2s/dog/cat/&#39; data.txt</code></p><p>过滤出第二行，只将第二行的dog替换为cat</p><h6 id="行区间"><a href="#行区间" class="headerlink" title="行区间"></a>行区间</h6><p><code>sed &#39;2,4s/dog/cat/&#39; data.txt</code></p><p>过滤出第2-4行，将2,3,4行的dog替换为cat</p><h6 id="指定行开始的所有行"><a href="#指定行开始的所有行" class="headerlink" title="指定行开始的所有行"></a>指定行开始的所有行</h6><p><code>sed &#39;2,$s/dog/cat/&#39; data.txt</code></p><p>过滤出第二行开始到最后一行，替换第二行开始到最后一行的dog为cat</p><h5 id="文本过滤"><a href="#文本过滤" class="headerlink" title="文本过滤"></a>文本过滤</h5><p>格式： <code>/pattern/command</code>  pattern前必须要用正斜线封装</p><p><code>sed &#39;/kyle/s/bash/csh&#39; /etc/passwd</code></p><p>过滤出用户kyle，将默认的shell改为csh</p><h5 id="组合命令过滤"><a href="#组合命令过滤" class="headerlink" title="组合命令过滤"></a>组合命令过滤</h5><p>格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">address &#123;</span><br><span class="line">command 1</span><br><span class="line">command 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要在单行上执行多条命令，需要用<strong>花括号</strong>将多条命令组合在一起，命令之间可以用换行或者分号隔开<br><code>sed &#39;2&#123;s/a/two/; s/dog/cats/&#125;&#39; data.txt</code><br>过滤到第二行，替换第二行的a为two，dog为cats</p><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><p>sed有两种插入方式，<code>i（insert）</code>和<code>a（append）</code>，分别是在指定行前以及指定行后插入<br>格式： <code>sed &#39;[address]command\&#39;</code><br><code>sed &#39;3i\This is a inserted line.&#39; data.txt</code><br>在第三行前插入</p><p><code>sed &#39;3a\This is an appended line.&#39; data.txt</code><br>在第三行后插入</p><p><code>sed &#39;$a\This is an appended line.&#39; data.txt</code><br>在文件末尾插入</p><h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><p>删和过滤类似<br><code>sed &#39;3d&#39; data.txt</code><br>删除第三行<br><code>sed &#39;3,4d&#39; data.txt</code><br>删除3,4行<br><code>sed &#39;3,$d&#39; data.txt</code><br>删除第三行开始到最后<br><code>sed &#39;/dog/d&#39; data.txt</code><br>删除匹配到dog的行</p><h5 id="改"><a href="#改" class="headerlink" title="改"></a>改</h5><h6 id="整行修改"><a href="#整行修改" class="headerlink" title="整行修改"></a>整行修改</h6><p>改和删也类似</p><p><code>sed &#39;3c\This is a changed line&#39; data.txt</code><br>改第三行<br><code>sed &#39;3,4c\This is a changed line&#39; data.txt</code><br>改3,4行<br><code>sed &#39;3,$c\This is a changed line&#39; data.txt</code><br>改第三行开始到最后<br><code>sed &#39;/dog/c\&#39; data.txt</code><br>改匹配到dog的行</p><h6 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h6><p>格式：<code>[address]/inchars/outchars/</code> 其中inchars和outchars的值一一对应（长度一致）<br><code>sed &#39;y/123/789/&#39; data.txt</code><br>将1替换成7,2换成8,3换成9</p><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>这边使用的是awk的GUN版本gawk。<br>格式：<code>gawk options program file</code><br>选项</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-F fs</td><td>指定数据分隔符</td></tr><tr><td>-f file</td><td>从指定文件中读取程序</td></tr><tr><td></td><td></td></tr></tbody></table><p>gawk的脚本命令必须放在两个花括号({})里面</p><h4 id="使用数据字段变量"><a href="#使用数据字段变量" class="headerlink" title="使用数据字段变量"></a>使用数据字段变量</h4><p>gawk会自动给一行中的每个数据元素分配一个变量，默认情况下按如下方式分配：</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>$0</td><td>整个文件行</td></tr><tr><td>$1</td><td>文本行中第一个数据字段</td></tr><tr><td>$2</td><td>文本行中第二个数据字段</td></tr><tr><td>$n</td><td>文本行中第n个数据字段</td></tr><tr><td></td><td></td></tr></tbody></table><p><code>gawk &#123;print $1&#125; data.txt</code></p><p>输出所有行的第一个数据字段</p><h4 id="指定分隔符"><a href="#指定分隔符" class="headerlink" title="指定分隔符"></a>指定分隔符</h4><p><code>gawk -F &#39;:&#39; &#123;print $1&#125; /etc/passwd</code></p><p>指定分隔符为冒号’:’，输出每行分割之后的第一个数据字段</p><h4 id="脚本使用多个程序命令"><a href="#脚本使用多个程序命令" class="headerlink" title="脚本使用多个程序命令"></a>脚本使用多个程序命令</h4><p><code>echo &quot;This is a cat&quot; | gawk &#39;&#123;$4=&quot;dog&quot;; print $0&#125;&#39; </code></p><p>多个命令之间用分号隔开</p><h4 id="从文件读取程序"><a href="#从文件读取程序" class="headerlink" title="从文件读取程序"></a>从文件读取程序</h4><p>cat script.gawk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;print $1 &quot;&#39;s home directory is &quot; $6&#125;</span><br></pre></td></tr></table></figure><p><code>gawk -F &#39;:&#39; -f script.gawk /etc/passwd</code><br>执行效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root&#39;s home directory is &#x2F;root</span><br><span class="line">bin&#39;s home directory is &#x2F;bin</span><br><span class="line">daemon&#39;s home directory is &#x2F;sbin</span><br><span class="line">... ...</span><br><span class="line">sshd&#39;s home directory is &#x2F;var&#x2F;empty&#x2F;sshd</span><br><span class="line">kyle&#39;s home directory is &#x2F;home&#x2F;kyle</span><br></pre></td></tr></table></figure><h4 id="数据处理前后动作"><a href="#数据处理前后动作" class="headerlink" title="数据处理前后动作"></a>数据处理前后动作</h4><p>gawk允许在数据处理前后使用<strong>BEGIN</strong>和<strong>END</strong>关键字指定运行前和运行后的动作。</p><p>cat script.gawk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">BEGIN&#123;</span><br><span class="line">print &quot;The latest list of users and shells&quot;</span><br><span class="line">print &quot; USERID \t SHELL&quot;</span><br><span class="line">print &quot;-------- \t --------&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">print $1 &quot;  \t &quot; $7</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">END&#123;</span><br><span class="line">print &quot;This concludes the listing&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gawk -F &#39;:&#39; -f script.gawk /etc/passwd</code><br>执行效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The latest list of users and shells</span><br><span class="line"> USERID  SHELL</span><br><span class="line">--------  --------</span><br><span class="line">root   &#x2F;bin&#x2F;bash</span><br><span class="line">bin   &#x2F;sbin&#x2F;nologin</span><br><span class="line">......</span><br><span class="line">kyle   &#x2F;bin&#x2F;bash</span><br><span class="line">This concludes the listing</span><br></pre></td></tr></table></figure><p>以上为sed和awk的基础入门部分，熟能生巧，完~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从学Linux开始，这俩就一直学学忘忘，记录下sed和awk的初阶使用&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://spindriftks.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="sed" scheme="https://spindriftks.github.io/tags/sed/"/>
    
    <category term="awk" scheme="https://spindriftks.github.io/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>Linux一些小技能</title>
    <link href="https://spindriftks.github.io/2021/01/07/Linux%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    <id>https://spindriftks.github.io/2021/01/07/Linux%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E8%83%BD/</id>
    <published>2021-01-07T01:12:46.000Z</published>
    <updated>2021-01-07T02:40:11.903Z</updated>
    
    <content type="html"><![CDATA[<p>一些Linux日常碰到的小技巧 –不间断更新</p><a id="more"></a><h3 id="vim设置tab空格数"><a href="#vim设置tab空格数" class="headerlink" title="vim设置tab空格数"></a>vim设置tab空格数</h3><p>vim编辑器中，tab默认的空格数是8，我们习惯上是4，可以通过修改配置文件来换成4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;vimrc</span><br><span class="line"># 添加一行</span><br><span class="line">set tabstop&#x3D;4</span><br><span class="line"># 保存生效</span><br></pre></td></tr></table></figure><h3 id="vim文本替换"><a href="#vim文本替换" class="headerlink" title="vim文本替换"></a>vim文本替换</h3><p>这个不算小技巧，基本技能，只是不常用的时候就一直忘记，顺手记录下方便查找：</p><table><thead><tr><th>命令</th><th>释义</th></tr></thead><tbody><tr><td>:s/old/new/g</td><td>替换光标当前行所有old</td></tr><tr><td>:n,ms/old/new/g</td><td>替换n到m行之间所有old</td></tr><tr><td>:%s/old/new/g</td><td>替换文件中所有old</td></tr><tr><td>:%s/old/new/gc</td><td>替换文件中所有old，每次替换都提示</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;一些Linux日常碰到的小技巧 –不间断更新&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="https://spindriftks.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Linux" scheme="https://spindriftks.github.io/tags/Linux/"/>
    
    <category term="vim" scheme="https://spindriftks.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>python中关于日期的一些函数</title>
    <link href="https://spindriftks.github.io/2020/12/25/python%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%97%A5%E6%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0/"/>
    <id>https://spindriftks.github.io/2020/12/25/python%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%97%A5%E6%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0/</id>
    <published>2020-12-25T05:18:03.000Z</published>
    <updated>2020-12-25T05:20:17.452Z</updated>
    
    <content type="html"><![CDATA[<p>自己封装了关于日期的两个函数，供需要时候使用</p><a id="more"></a><h3 id="获取时间与当前日期比较"><a href="#获取时间与当前日期比较" class="headerlink" title="获取时间与当前日期比较"></a>获取时间与当前日期比较</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*-coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@author: kyle</span></span><br><span class="line"><span class="string">@time: 2020/6/29 14:46</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff_date</span>(<span class="params">t_date</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    和当前日期比较</span></span><br><span class="line"><span class="string">    :param t_date: 待比较日期</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    tmp_today = datetime.datetime.today()</span><br><span class="line">    today = tmp_today.date()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 格式化，str转换成 datetime格式</span></span><br><span class="line">    tmp_date_reg = datetime.datetime.strptime(t_date, <span class="string">&#x27;%Y-%m-%d&#x27;</span>).date()</span><br><span class="line"></span><br><span class="line">    result = (tmp_date_reg - today).days</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> t_date + <span class="string">&quot; 在未来&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> result == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> t_date + <span class="string">&quot; 是今天&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> t_date + <span class="string">&quot; 在过去&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(diff_date(<span class="string">&#x27;2020-07-01&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="获取一段时间内所有节假日"><a href="#获取一段时间内所有节假日" class="headerlink" title="获取一段时间内所有节假日"></a>获取一段时间内所有节假日</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*-coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@author: kyle</span></span><br><span class="line"><span class="string">@time: 2020/6/4 11:05</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一段时间内所有节假日</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pip install chinesecalendar</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> chinese_calendar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg_date</span>(<span class="params">t_date</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    格式化日期</span></span><br><span class="line"><span class="string">    :param t_date:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> datetime.datetime.strptime(t_date, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_holiday</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回指定时间区间内的节假日</span></span><br><span class="line"><span class="string">    :param start:</span></span><br><span class="line"><span class="string">    :param end:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> chinese_calendar.get_holidays(reg_date(start), reg_date(end))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_holiday_no_weekends</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回指定时间区间内的节假日,不含周末</span></span><br><span class="line"><span class="string">    :param start:</span></span><br><span class="line"><span class="string">    :param end:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> chinese_calendar.get_holidays(reg_date(start), reg_date(end), include_weekends=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_workday</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回指定时间区间内的工作日</span></span><br><span class="line"><span class="string">    :param start:</span></span><br><span class="line"><span class="string">    :param end:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> chinese_calendar.get_workdays(reg_date(start), reg_date(end))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_date</span>(<span class="params">t_date</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    判断某个日期属于节假日还是工作日</span></span><br><span class="line"><span class="string">    :param t_date:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 格式化日期,获取该日期的年份</span></span><br><span class="line">    t_year = reg_date(t_date).year</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取节假日和工作日</span></span><br><span class="line">    holidays = get_holiday(<span class="string">&#x27;&#123;&#125;-01-01&#x27;</span>.<span class="built_in">format</span>(t_year), <span class="string">&#x27;&#123;&#125;-12-31&#x27;</span>.<span class="built_in">format</span>(t_year))</span><br><span class="line">    <span class="comment"># workdays = get_workday(&#x27;&#123;&#125;-01-01&#x27;.format(t_year), &#x27;&#123;&#125;-12-31&#x27;.format(t_year))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断属于节假日还是工作日</span></span><br><span class="line">    <span class="keyword">if</span> datetime.date(reg_date(t_date).year, reg_date(t_date).month, reg_date(t_date).day) <span class="keyword">in</span> holidays:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(t_date) + <span class="string">&quot; 是节假日&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(t_date) + <span class="string">&quot; 是工作日&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(judge_date(<span class="string">&#x27;2020-06-28&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="获取指定区间内的所有日期"><a href="#获取指定区间内的所有日期" class="headerlink" title="获取指定区间内的所有日期"></a>获取指定区间内的所有日期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg_date</span>(<span class="params">t_date</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    格式化日期</span></span><br><span class="line"><span class="string">    :param t_date:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> datetime.strptime(t_date, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_daterange</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    <span class="comment"># 格式化</span></span><br><span class="line">    start = reg_date(start)</span><br><span class="line">    end = reg_date(end)</span><br><span class="line"></span><br><span class="line">    delta = (end - start).days</span><br><span class="line">    res_date = [(start + timedelta(days=deltaday)).date() <span class="keyword">for</span> deltaday <span class="keyword">in</span> <span class="built_in">range</span>(delta+<span class="number">1</span>)]</span><br><span class="line">    <span class="comment"># 输出结果转strpy</span></span><br><span class="line">    <span class="keyword">return</span> [date.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">for</span> date <span class="keyword">in</span> res_date]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(get_daterange(<span class="string">&#x27;2020-05-01&#x27;</span>, <span class="string">&#x27;2020-06-02&#x27;</span>))</span><br><span class="line">    dateTime = datetime.today().date()</span><br><span class="line">    print(dateTime.isoformat())</span><br></pre></td></tr></table></figure><h3 id="datetime格式转str"><a href="#datetime格式转str" class="headerlink" title="datetime格式转str"></a>datetime格式转str</h3><h4 id="isoformat"><a href="#isoformat" class="headerlink" title="isoformat()"></a>isoformat()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">dateTime = datetime.today().date()</span><br><span class="line">r_date = dateTime.isoformat()</span><br><span class="line">print(dateTime)</span><br><span class="line">print(r_date)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(dateTime))</span><br><span class="line">print(<span class="built_in">type</span>(r_date))</span><br></pre></td></tr></table></figure><h4 id="datetime-strftime"><a href="#datetime-strftime" class="headerlink" title="datetime.strftime"></a>datetime.strftime</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">dateTime = datetime.today().date()</span><br><span class="line">r_date = dateTime.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">print(dateTime)</span><br><span class="line">print(r_date)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(dateTime))</span><br><span class="line">print(<span class="built_in">type</span>(r_date))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;自己封装了关于日期的两个函数，供需要时候使用&lt;/p&gt;</summary>
    
    
    
    <category term="python基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python3" scheme="https://spindriftks.github.io/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>python中break pass continue比较</title>
    <link href="https://spindriftks.github.io/2020/12/25/python%E4%B8%ADbreak-pass-continue%E6%AF%94%E8%BE%83/"/>
    <id>https://spindriftks.github.io/2020/12/25/python%E4%B8%ADbreak-pass-continue%E6%AF%94%E8%BE%83/</id>
    <published>2020-12-25T05:16:06.000Z</published>
    <updated>2020-12-25T05:17:29.227Z</updated>
    
    <content type="html"><![CDATA[<p>python3中break，continue，pass比较</p><a id="more"></a><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p><code>break</code>跳出当前层次的循环</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;python&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(i, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：<code>py</code></p><p>遇到嵌套循环时，break只会跳出所在层的循环，例如以下会跳出最内层循环，对外层没有影响：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;python&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        print(i, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>输出结果：<code>pppyyythhhooonnn</code></p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p><code>continue</code>跳出当前当次循环，不跳出循环体，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&#x27;python&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> j == <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(j, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出：<code>pyhon</code></p><h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><p><code>pass</code>可以看做是python的一个占位符，遇到有的方法当时不知道怎么设计细节时候，可以用pass占位，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">name</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>该函数没有实现任何具体的业务逻辑</p><p>另外在循环中使用pass不会跳出循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="string">&#x27;python&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> k == <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(k, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：<code>python</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python3中break，continue，pass比较&lt;/p&gt;</summary>
    
    
    
    <category term="python基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python3" scheme="https://spindriftks.github.io/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>python3读取乱码文件</title>
    <link href="https://spindriftks.github.io/2020/12/25/python3%E8%AF%BB%E5%8F%96%E4%B9%B1%E7%A0%81%E6%96%87%E4%BB%B6/"/>
    <id>https://spindriftks.github.io/2020/12/25/python3%E8%AF%BB%E5%8F%96%E4%B9%B1%E7%A0%81%E6%96%87%E4%BB%B6/</id>
    <published>2020-12-25T05:13:49.000Z</published>
    <updated>2020-12-25T05:15:21.681Z</updated>
    
    <content type="html"><![CDATA[<p>python读取文件中乱码内容</p><a id="more"></a><p>首要矛盾不应该是避免写出乱码日志嘛~~~不过既然存在了，只能想办法解决</p><p>文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2020-06-04 09:30:21,011 - INFO - &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; setup &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">2020-06-04 09:30:21,016 - INFO - 启动TC003_01_punchGPS</span><br><span class="line">2020-06-04 09:30:35,119 - INFO - APP::TC003_01_punchGPS_</span><br><span class="line">2020-06-04 09:30:35,123 - INFO - APP::鎵撳紑鍔冲姩鍔涚鐞嗛〉闈</span><br><span class="line">2020-06-04 09:30:48,885 - INFO - APP::鐧诲綍鍔冲姩鍔涚鐞咥PP_</span><br><span class="line">2020-06-04 09:31:51,872 - INFO - APP::杩涘叆鐧诲綍鍔冲姩鍔涚鐞嗚彍鍗昣</span><br><span class="line">2020-06-04 09:31:57,813 - INFO - APP::verify:杩涘叆绉诲姩鎵撳崱_</span><br><span class="line">2020-06-04 09:32:01,860 - INFO - APP::verify:閫夋嫨鎵撳崱鏂瑰紡_</span><br><span class="line">2020-06-04 09:32:07,617 - INFO - APP::verify:鑾峰彇鎵撳崱鏃堕棿_</span><br><span class="line">2020-06-04 09:32:08,484 - INFO - APP::punchTime&#x3D;09:32_</span><br></pre></td></tr></table></figure><p>目标是截取到“punchTime”的值，并且去掉“_”</p><p>开始写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;E:/py_workstation/tmpfiles/WFM4_old.TC003_01_punchGPS_1_1.log&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;punchTime&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">            res = line</span><br><span class="line">            print(res)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">aim_time_index = res.find(<span class="string">&#x27;punchTime&#x27;</span>)</span><br><span class="line"><span class="comment"># print(aim_time_index)</span></span><br><span class="line"></span><br><span class="line">aim_time = res[aim_time_index+<span class="number">10</span>:].replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(aim_time)</span><br></pre></td></tr></table></figure><p>然后出现一堆你懂得报错：<code>UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xc6 in position 87: invalid continuation byte</code></p><p>查了一圈，解决办法两个：<br>1，直接工具，例如”notepad“转到utf-8<br>2，编码指定为:encoding=’unicode_escape’</p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*-coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@author: kyle</span></span><br><span class="line"><span class="string">@time: 2020/6/4 10:17</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># filename = &#x27;E:/py_workstation/tmpfiles/punchGPS_1_1.log&#x27;</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;E:/py_workstation/tmpfiles/WFM4_old.TC003_01_punchGPS_1_1.log&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, encoding=<span class="string">&#x27;unicode_escape&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;punchTime&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">            res = line</span><br><span class="line">            print(res)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">aim_time_index = res.find(<span class="string">&#x27;punchTime&#x27;</span>)</span><br><span class="line"><span class="comment"># print(aim_time_index)</span></span><br><span class="line"></span><br><span class="line">aim_time = res[aim_time_index+<span class="number">10</span>:].replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(aim_time)</span><br></pre></td></tr></table></figure><p>另外，可以考虑两个包<code>codecs</code>和<code>chardet</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python读取文件中乱码内容&lt;/p&gt;</summary>
    
    
    
    <category term="python基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python3" scheme="https://spindriftks.github.io/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>pycharm日常报错总结</title>
    <link href="https://spindriftks.github.io/2020/12/25/pycharm%E6%97%A5%E5%B8%B8%E6%8A%A5%E9%94%99%E6%80%BB%E7%BB%93/"/>
    <id>https://spindriftks.github.io/2020/12/25/pycharm%E6%97%A5%E5%B8%B8%E6%8A%A5%E9%94%99%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-25T05:06:44.000Z</published>
    <updated>2020-12-25T05:09:47.029Z</updated>
    
    <content type="html"><![CDATA[<p>一些日常使用pycharm过程中遇到的问题的记录，持续更新</p><a id="more"></a><ol><li>print，range，len等函数，在pycharm中出现红色下划线（有错误），提示  “Unresolved reference ‘print’”，但是可以正常执行</li></ol><p><code>解决办法：File -&gt; Invalidate Caches / Restart... -&gt; Invalidate and Restart</code></p><ol start="2"><li>切换分支（checkout），报“Permission denied can’t cannot stat ‘xxx’”<br><code>解决办法：关闭pycharm，所有浏览器，文件管理器，重启pycharm，再切换</code></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;一些日常使用pycharm过程中遇到的问题的记录，持续更新&lt;/p&gt;</summary>
    
    
    
    <category term="python基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="pycharm" scheme="https://spindriftks.github.io/tags/pycharm/"/>
    
  </entry>
  
  <entry>
    <title>python时区</title>
    <link href="https://spindriftks.github.io/2020/12/25/python%E6%97%B6%E5%8C%BA/"/>
    <id>https://spindriftks.github.io/2020/12/25/python%E6%97%B6%E5%8C%BA/</id>
    <published>2020-12-25T03:20:26.000Z</published>
    <updated>2020-12-25T05:12:51.576Z</updated>
    
    <content type="html"><![CDATA[<p>一点关于python里面时区的知识</p><a id="more"></a><h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><p><code>GMT</code> ： GMT时区是格林威治时间<br><code>UTC（Universal Coordinated Time）</code> ： UTC时区是根据GMT得来的“世界标准时间”<br><code>CST</code> ： CST时区指代有多个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">澳洲中部时间，Central Standard Time (Australia)</span><br><span class="line">中部标准时区（北美洲），Central Standard Time (North America)</span><br><span class="line">北京时间，China Standard Time</span><br><span class="line">古巴标准时间，Cuba Standard Time</span><br></pre></td></tr></table></figure><p>我们所在的时区（东八区），按照北京时间，实际上CST=UTC +08:00</p><h3 id="ISO-8601和UTC"><a href="#ISO-8601和UTC" class="headerlink" title="ISO 8601和UTC"></a>ISO 8601和UTC</h3><h4 id="UTC"><a href="#UTC" class="headerlink" title="UTC"></a>UTC</h4><p>用python分别输出 UTC 时区和CST(北京时区)的当前时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># import pytz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认时区（CST北京时区）</span></span><br><span class="line">now_cst = datetime.now()</span><br><span class="line">print(now_cst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定UTC时间</span></span><br><span class="line"><span class="comment"># utc_tz = pytz.timezone(&#x27;UTC&#x27;)</span></span><br><span class="line"><span class="comment"># now_utc = datetime.now(tz=utc_tz)</span></span><br><span class="line">now_utc = datetime.utcnow()</span><br><span class="line">print(now_utc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2020</span>-07-01 <span class="number">14</span>:08:<span class="number">49.946031</span></span><br><span class="line"><span class="number">2020</span>-07-01 06:08:<span class="number">49.946031</span></span><br></pre></td></tr></table></figure><p>可以看到当前时区（北京）时间是UTC时间加8小时</p><h4 id="ISO8601"><a href="#ISO8601" class="headerlink" title="ISO8601"></a>ISO8601</h4><p>ISO8601全称：数据存储和交换形式·信息交换·日期和时间的表示方法，是国际标准化组织制定的表示日期和时间的国际标准，官方原话:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This ISO standard helps remove doubts that can result from the various day–date conventions, cultures and time zones that impact a global operation. It gives a way of presenting dates and times that is clearly defined and understandable to both people and machines.</span><br></pre></td></tr></table></figure><p>python将当前时间转换为 ISO8601格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># import pytz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认时区（CST北京时区）</span></span><br><span class="line">now_cst = datetime.now()</span><br><span class="line">print(now_cst)</span><br><span class="line">print(now_cst.isoformat())</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;=&quot;</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定UTC时间</span></span><br><span class="line"><span class="comment"># utc_tz = pytz.timezone(&#x27;UTC&#x27;)</span></span><br><span class="line"><span class="comment"># now_utc = datetime.now(tz=utc_tz)</span></span><br><span class="line">now_utc = datetime.utcnow()</span><br><span class="line">print(now_utc)</span><br><span class="line">print(now_utc.isoformat())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2020</span>-07-01 <span class="number">14</span>:<span class="number">34</span>:<span class="number">10.948195</span></span><br><span class="line"><span class="number">2020</span>-07-01T14:<span class="number">34</span>:<span class="number">10.948195</span></span><br><span class="line">==============================</span><br><span class="line"><span class="number">2020</span>-07-01 06:<span class="number">34</span>:<span class="number">10.948195</span></span><br><span class="line"><span class="number">2020</span>-07-01T06:<span class="number">34</span>:<span class="number">10.948195</span></span><br></pre></td></tr></table></figure><p>ISO8601格式的输出结果比普通输出结果多了一个T，T表示后面是日期时间值的时间部分；</p><p>除了这个区别，还有就是类型上的区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">now_cst = datetime.now()</span><br><span class="line">print(now_cst, <span class="built_in">type</span>(now_cst))</span><br><span class="line">print(now_cst.isoformat(), <span class="built_in">type</span>(now_cst.isoformat()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2020</span>-07-01 <span class="number">14</span>:<span class="number">17</span>:<span class="number">26.834861</span> &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">datetime</span>.<span class="title">datetime</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">2020-07-01<span class="title">T14</span>:</span><span class="number">17</span>:<span class="number">26.834861</span> &lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到将时间转换成ISO8601格式之后，类型也从<code>datetime.datetime</code>转换成了<code>str</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一点关于python里面时区的知识&lt;/p&gt;</summary>
    
    
    
    <category term="python基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机基础" scheme="https://spindriftks.github.io/categories/python%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python3" scheme="https://spindriftks.github.io/tags/python3/"/>
    
  </entry>
  
</feed>
